{"version":3,"sources":["logo.svg","App.tsx","serviceWorkerRegistration.ts","reportWebVitals.ts","index.tsx"],"names":["App","deferredPrompt","divInstall","document","getElementById","butInstall","useState","window","addEventListener","event","console","log","classList","toggle","a","promptEvent","prompt","userChoice","result","className","src","logo","alt","href","target","rel","id","type","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","catch","error","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","URL","process","origin","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration","scope"],"mappings":"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","file":"static/js/main.b29d0dbd.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.103b5fa1.svg\";","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport {useState, useEffect } from 'react'\n\nfunction App() {\n  const divInstall: any = document.getElementById('installContainer');\n  const butInstall: any = document.getElementById('butInstall');\n\n\n  const [installable, setInstallable] = useState(false);\n  let deferredPrompt: any;\n/*\n  useEffect(() => {\n    window.addEventListener(\"beforeinstallprompt\", (e: any) => {\n      // Prevent the mini-infobar from appearing on mobile\n      e.preventDefault();\n      // Stash the event so it can be triggered later.\n      deferredPrompt = e;\n      // Update UI notify the user they can install the PWA\n      setInstallable(true);\n    });\n\n    window.addEventListener('appinstalled', () => {\n      // Log install to analytics\n      console.log('INSTALL: Success');\n    });\n  }, []);\n\n  const handleInstallClick = (e: any) => {\n      // Hide the app provided install promotion\n      setInstallable(false);\n      // Show the install prompt\n      deferredPrompt.prompt();\n      // Wait for the user to respond to the prompt\n      deferredPrompt.userChoice.then((choiceResult: any) => {\n        if (choiceResult.outcome === 'accepted') {\n          console.log('User accepted the install prompt');\n        } else {\n          console.log('User dismissed the install prompt');\n        }\n      });\n  };\n*/\n\nwindow.addEventListener('beforeinstallprompt', (event) => {\n  console.log('üëç', 'beforeinstallprompt', event);\n  // Stash the event so it can be triggered later.\n  deferredPrompt = event;\n  // Remove the 'hidden' class from the install button container\n  divInstall.classList.toggle('hidden', false);\n});\n\nbutInstall.addEventListener('click', async () => {\n  console.log('üëç', 'butInstall-clicked');\n  const promptEvent = deferredPrompt;\n  if (!promptEvent) {\n    // The deferred prompt isn't available.\n    return;\n  }\n  // Show the install prompt.\n  promptEvent.prompt();\n  // Log the result\n  const result = await promptEvent.userChoice;\n  console.log('üëç', 'userChoice', result);\n  // Reset the deferred prompt variable, since\n  // prompt() can only be called once.\n  deferredPrompt = null;\n  // Hide the install button.\n  divInstall.classList.toggle('hidden', true);\n});\n\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          KotlinskiDev!\n        </p>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Portfolio\n        </a>\n        <div id=\"installContainer\" className =\"hidden\">\n      <button id=\"butInstall\" type=\"button\">\n        Install\n      </button>\n    </div>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.register();\n\nconsole.error(\"SERVICE WORKER: \", navigator.serviceWorker);\nif (navigator.serviceWorker) {\n  navigator.serviceWorker.register('/service-worker.js').then(function(registration) {\n    console.log('ServiceWorker registration successful with scope:',  registration.scope);\n  }).catch(function(error) {\n    console.log('ServiceWorker registration failed:', error);\n  });\n}\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}